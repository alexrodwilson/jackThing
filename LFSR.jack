class LFSR {

   field Array array;
   field int nOfBits;

   constructor LFSR new(int bits) {
      var int i;
      let nOfBits = bits;
      let array = Array.new(nOfBits);
      let i = 0;
      while (i < nOfBits) {
         do set(0, i);
         let i = i + 1;
      }
      return this;  
   }

   method void dispose(){
      do array.dispose();
      do Memory.deAlloc(this);
      return;    
   }

   method int get(int index){
      return array[index];
   }

   method void set(int val, int index){
      if (~ ((val = 0) | (val = 1))){
         do Sys.error(69);
      }
      let array[index] = val;
      return;
    }

   method void print() {
      var int i;
      let i = 0;

      while ( i < nOfBits) {
         do Output.printInt(get(i));
         let i = i + 1;
      }
      return;
   }

   method int getMSB() {
      return get(0);
   }

   method int getLSB() {
      return get(getNOfBits() - 1);
   }

   method int getNOfBits(){
      if (nOfBits = 0) {
         do Sys.error(420);
      }
      return nOfBits;
   }

   function LFSR leftShift(LFSR input, int shift) {
      var int bits;
      var LFSR output;
      var int i;
      do LFSR.checkBin(input);
      let bits = input.getNOfBits();
      let output = LFSR.new(bits);
      let i = shift;
      while (i < bits) {
         do output.set(input.get(i), i - shift);
         let i = i + 1;
      }
      do LFSR.checkBin(output);
      return output;  
   }

   function void checkBin(LFSR bin) {
      var int i;
      var int bits;
      let i = 0;
      let bits = bin.getNOfBits();
      if (bits = 0){
          do Sys.error(420);
       }
      while (i < bits) {
         if (~ ((bin.get(i) = 0) | (bin.get(i) = 1))) {
            do Output.moveCursor(5,10);
            do Output.printInt(bin.get(i));
            do Output.println();
            do Sys.error(69);
         }
         let i = i + 1;
      }
      return;
   }

   function LFSR XORShift(LFSR a, LFSR b){
      var int bits;
      var LFSR output;
      var int i;
      do LFSR.checkBin(a);
      do LFSR.checkBin(b);
      let bits = a.getNOfBits();
      let output = LFSR.new(bits);
      let i = 0;
      while (i < bits){
         if (a.get(i) = b.get(i)){
            do output.set(0, i);
         }
         else {
            do output.set(1, i);
         }
         let i = i + 1;
      }
      do LFSR.checkBin(output);
      return output;
   }
   function LFSR decToBin(int dec, int bits){
      var LFSR output;
      var int temp;
      var int rem;
      var int i;
      let output = LFSR.new(bits);
      let i = bits - 1;
      while (dec > 0) {
         let temp = dec;
         let dec = dec / 2;
         let rem = temp - (dec * 2);
         do output.set(rem, i);
         let i = i - 1;
      }
      return output;
      do LFSR.checkBin(output);
   }

   function boolean binEquals(LFSR binA, LFSR binB){
      var int i;
      var int bits;
      let i = 0;
      let bits = binA.getNOfBits();
      while (i < bits){
         if (~ (binA.get(i) = binB.get(i))) {
            return false;
         }
         let i = i + 1;
      }
      return true;
   }

   function LFSR nextGalois(LFSR prevState) {
      var LFSR shifted;
      var LFSR res;
      var LFSR mask;
      var int msb;
      do LFSR.checkBin(prevState);
      let msb = prevState.getMSB();
      let shifted = LFSR.leftShift(prevState, 1);
      let mask = LFSR.decToBin(45, 16);
      if (msb = 1) {
         let res = LFSR.XORShift(shifted, mask);
      }
      else {
         let res = shifted;
      }
      do shifted.dispose();
      do mask.dispose();
      do LFSR.checkBin(res);
      return res;      
   }

}