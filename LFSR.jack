class LFSR{
   field int currentBit;
   field Array array;
   field int nOfBits;


   constructor LFSR new(int bits){
      var int i;
      let currentBit = 0;
      let nOfBits = bits;
      let array = Array.new(nOfBits);
      let i = 0;
      while (i < nOfBits) {
         do set(0, i);
         let i = i + 1;
      }
      return this; 
   }

   method void dispose(){
      do array.dispose();
      do Memory.deAlloc(this);
      return;    
   }
    
   method int get(int index){
      return array[index];
   }

   method void set(int val, int index){
      if (~ ((val = 0) | (val = 1))){
         do Sys.error(69);
      }
      let array[index] = val;
      return;
    }

   method void build(int binDig){
      if (~ ((binDig = 1)|(binDig = 0))){
         do Sys.error(69);
      }
      let array[currentBit] = binDig;
      let currentBit = currentBit + 1;
      return;
   }

   method void print(){
      var int i;
      let i = 0;
      
      while (i < nOfBits){
         do Output.printInt(get(i));
         let i = i + 1;
      }
      return;
   }
  
   method int getMSB() {
      return get(0);
   }
   
   method int getNOfBits(){
      return nOfBits;
   }

   function LFSR leftShift(LFSR input, int shift){
      var int bits;
      var LFSR output;
      var int i;
      let bits = input.getNOfBits();
      let output = LFSR.new(bits);
      let i = 0;
      while ((i + shift) < bits){
         do output.build(input.get(shift + i));
         let i = i + 1;
      }
      return output;     
   }

   function LFSR XOR(LFSR a, LFSR b){
      var int bits;
      var LFSR output;
      var int i;
      let bits = a.getNOfBits();
      let output = LFSR.new(bits);
      let i = 0;
      while (i < bits){
         if (a.get(i) = b.get(i)){
            do output.build(0);
         }
         else {
            do output.build(1);
         }
         let i = i + 1;
      }
      return output;
   }

   function LFSR decToBin(int dec, int bits){
      var LFSR output;
      var int temp;
      var int rem;
      var int i;
      let output = LFSR.new(bits);
      let i = bits - 1;
      while (dec > 0) {
         let temp = dec;
         let dec = dec / 2;
         let rem = temp - (dec * 2);
         do output.set(rem, i);
         let i = i - 1;
      }
      return output;
   }
   
   function LFSR stringToBin(String binS) {
      var int bits;
      var LFSR output;
      var int i;
      var int char;
      let bits = binS.length();
      let output = LFSR.new(bits);
      let i = 0;
      while ( i < bits) {
         let char = binS.charAt(i);
         if (char = 48) {
            do output.build(0);
         }
         else {
            do output.build(1);
         }
         let i = i + 1;
      }
      return output;
      
   }

   function int pow(int n, int exp){
      if (exp = 0){
         return 1;
      }
      else{
         return n * LFSR.pow(n, exp - 1);
      }
   }

   function LFSR nextGalois(LFSR prevState){
      var int msb;
      var LFSR shifted;
      var LFSR mask;
      var LFSR res;
      let msb = getMSB();
      let shifted = LFSR.leftShift(prevState, 1);
      let mask = LFSR.stringToBin("0000000000101101");
      if (msb = 1) {
         let res = LFSR.XOR(shifted, mask);
         do shifted.dispose();
         do mask.dispose();
         return res;
      }
      else {
         do mask.dispose();
         do res.dispose();
         return shifted;
      }
   } 
   
   function boolean binEquals(LFSR binA, LFSR binB){
      var int i;
      var int bits;
      let i = 0;
      let bits = binA.getNOfBits();
      while (i < bits){
         if (~ (binA.get(i) = binB.get(i))) {
            return false;
         }
      let i = i + 1;
      }
      return true;
   }

  function int galois(int seed) {
     var LFSR startingState;
     var LFSR state;
     var int period;
     var boolean looping;
     let startingState = LFSR.decToBin(seed, 16);
     let state = LFSR.decToBin(seed, 16);
     let looping = true;
     let period = 0;
     while (looping){
	let state = LFSR.nextGalois(state);
        let period = period + 1;
        if (LFSR.binEquals(state, startingState) | (period = 300)){
          let looping = false;
        }     
     }
     do state.dispose();  
     do startingState.dispose();
     //do state.dispose();
     return period;
  }

}
