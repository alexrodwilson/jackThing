class LFSR{
   field int currentBit;
   field Array array;
   field int nOfBits;


   constructor LFSR new(int bits){
      var int i;
      let currentBit = 0;
      let nOfBits = bits;
      let array = Array.new(nOfBits);
      let i = 0;
      while (i < nOfBits) {
         do set(0, i);
         let i = i + 1;
      }
      return this; 
   }

   method void dispose(){
      do array.dispose();
      do Memory.deAlloc(this);
      return;    
   }
    
   method int get(int index){
      return array[index];
   }

   method void set(int val, int index){
      let array[index] = val;
      return;
    }

   method void build(int binDig){
      if (~ ((binDig = 1)|(binDig = 0))){
         do Sys.error(69);
      }
      let array[currentBit] = binDig;
      let currentBit = currentBit + 1;
      return;
   }

   method void print(){
      var int i;
      let i = 0;
      
      while (i < nOfBits){
         do Output.printInt(get(i));
         let i = i + 1;
      }
      return;
   }
   
   method int getNOfBits(){
      return nOfBits;
   }

   function LFSR leftShift(LFSR input, int shift){
      var int bits;
      var LFSR output;
      var int i;
      let bits = input.getNOfBits();
      let output = LFSR.new(bits);
      let i = 0;
      while ((i + shift) < bits){
         do output.build(input.get(shift + i));
         let i = i + 1;
      }
     let i = 0;
     while (i < shift){
        do output.build(0);
        let i = i + 1;
     }
     return output;     
   }

   function LFSR XOR(LFSR a, LFSR b){
      var int bits;
      var LFSR output;
      var int i;
      let bits = a.getNOfBits();
      let output = LFSR.new(bits);
      let i = 0;
      while (i < bits){
         if (a.get(i) = b.get(i)){
            do output.build(0);
         }
         else {
            do output.build(1);
         }
      let i = i + 1;
      }
      return output;
   }

   function LFSR decToBin2(int dec, int bits){
      var int msbVal;
      var LFSR bin;
      var int i;
      let msbVal = LFSR.pow(2, bits - 1);
      let bin = LFSR.new(bits);
      if (dec = 0){
         let i = 0;
         while (i < bits){
            do bin.build(0);
            let i = i + 1;
         }
         return bin;
      }
      while (dec > 0){
          if (~ (msbVal > dec)){
             let dec = dec - msbVal;
             do bin.build(1);
          }
          else{
             do bin.build(0);
          }
          let msbVal = msbVal / 2;
      }
      return bin;
    }


   function LFSR decToBin(int dec, int bits){
      var LFSR output;
      var int temp;
      var int rem;
      var int i;
      let output = LFSR.new(bits);
      let i = bits - 1;
      while (dec > 0) {
         let temp = dec;
         let dec = dec / 2;
         let rem = temp - (dec * 2);
         do output.set(rem, i);
         let i = i - 1;
      }
      return output;
   }

   function int pow(int n, int exp){
      if (exp = 0){
         return 1;
      }
      else{
         return n * LFSR.pow(n, exp - 1);
      }
   }

}
