class Main {
   static int WIDTH, HEIGHT, SIZE, SCALE, LEFT_PADDING, TOP_PADDING;
   static Array array, scratch, temp;
   
   function void main(){

     var int seed, i, changes, state, key;
     var boolean loop;
     var RandGen randG;
//     while (true) {
       let SCALE = 4;
       let LEFT_PADDING = 20;
       let TOP_PADDING = 20;
       let WIDTH = 50;
       let HEIGHT = 50;
       let SIZE = WIDTH * HEIGHT;
       let state = 0;
       let array = Array.new(SIZE);
       let scratch = Array.new(SIZE);
       
       while (state = 0) {
          let seed = Main.drawGetSeedScreen();
          let key = Keyboard.keyPressed();
          if (key = 32) {
             let state = 1;
          }
       } 
       while (state = 1) {
          let randG = RandGen.new(seed);
          let i = 0;
          while (i < SIZE) {
             let array[i] = randG.genBit();
             let i = i + 1;
          }
          do randG.dispose();
          do Main.setLiveBorder(array);
          do Main.setLiveBorder(scratch);
          do Main.drawArray(array);  
          do Main.printSeed(seed);
          let loop = true;
          let changes = 1;
          while (loop) {
            let key = Keyboard.keyPressed();
            if (key = 32) {
              if (changes = 0) {
                 let state = 0;
                 let loop = false;
              }
              let changes = Main.step(array, scratch);
              let temp = array;
              let array = scratch;
              let scratch = temp;
              do Screen.clearScreen();
              do Main.drawArray(array);
              do Output.moveCursor(5, 33);
              do Output.printString("Changes: ");
              do Output.printInt(changes);
              do Main.printSeed(seed);
            }
         }
       }
       do array.dispose();
       do scratch.dispose();
    // }
     return;
  }

   function int drawGetSeedScreen() {
      var int tick, key;
      var String s;
      var boolean loop;
      let tick = 0;
      let loop = true;
      let s = "Press Space to Proceed";
      do Output.moveCursor(11, 20);
      do Output.printString(s);
      do Output.moveCursor(14, 33);
      while (loop) {
         let tick = tick + 1;
         let key = Keyboard.keyPressed();
         if (key = 32){
            let loop = false;
         }
         if (tick > 32766){
            let tick = 1;
         }
         do Output.printInt(tick);
      }
      return tick;
   }
   function void printSeed(int seed){
      do Output.moveCursor(8, 33);
      do Output.printString("Seed: ");
      do Output.printInt(seed);
      return;
   }


   function void setLiveBorder(Array array) {
      var int x, y;
      let y = 0;
      while (y < HEIGHT) {
         do Main.setCell(array, 0, y, 1);
         let y = y + 1;   
      }
      let x = 0;
      while (x < WIDTH) {
         do Main.setCell(array, x, 0, 1);
         let x = x + 1;
      }
      let y = 0;
      while (y < HEIGHT) {
         do Main.setCell(array, WIDTH - 1, y, 1);
         let y = y + 1;   
      } 
      let x = 0;
      while (x < WIDTH) {
         do Main.setCell(array, x, HEIGHT - 1, 1);
         let x = x + 1;
      }         
      return;
   }
   
   function int getCell(Array array, int x, int y) {
      return array[x + (y * WIDTH)];
   }

   function void setCell(Array array, int x, int y, int val) {
      let array[x + (y * WIDTH)] = val;
      return;
   }

   function int nOfLiveNeighbours(Array array, int x, int y) {
      var int xi, yi, count;
      let count = 0;
      let xi = -1;
      let yi = -1;
      while (yi < 2) {
         while (xi < 2) {
            let count = count + Main.getCell(array,x + xi, y + yi);
            let xi = xi + 1;
         }
         let yi = yi + 1;
         let xi = -1;
      }
      let count = count - Main.getCell(array, x, y);
      return count;
   }   

   function int step (Array array, Array scratch) {
      var int x, y, neighbours, changes;
      let x = 1;
      let y = 1;
      let changes = 0;
      while (y < (HEIGHT - 1)) {
         while (x < (WIDTH - 1)) {
            let neighbours = Main.nOfLiveNeighbours(array, x, y);
            if (Main.getCell(array, x, y) = 0) {
               if (neighbours > 5) {
                 do Main.setCell(scratch, x, y, 1); 
                 let changes = changes + 1;
               }
               else {
                 do Main.setCell(scratch, x, y, 0);
               }
            }
            else {
               if (neighbours < 3) {
                  do Main.setCell(scratch, x, y, 0);
                  let changes = changes + 1;
               }
               else {
                  do Main.setCell(scratch, x, y, 1);
               }
            }
            let x = x + 1;
         }
         let y = y + 1;
         let x = 1;
      }

      return changes;
   }

/*   function int nOfLiveNeighbours(Array array, int x, int y) {
      var int count;
      let count = 0;
      if (x > 0) {
         count = count + Main.getCell(array, x - 1, y);
      }
      if (y > 0){
         count = count + Main.getCell(array, x, y - 1);
      }
      if (x < (WIDTH - 1)) {
         count = count + Main.getCell(array, x + 1, y);
      }
      if (y < (HEIGHT - 1)) {
         count = count + Main.getCell(array, x, y + 1);
      }
      if ((x > 0) & (y > 0)) {
         count = count + Main.getCell(array, x - 1, y);
      }
      if (y > 0 {
         count = count + Main.getCell(array, x, y - 1);
      }
      if (x < (WIDTH - 1)) {
         count = count + Main.getCell(array, x + 1, y);
      }
      if (y < (HEIGHT - 1) {
         count = count + Main.getCell(array, x, y - 1);
      }
    
   }
*/
   function void drawArray(Array array) {
    var int x, y, posX, posY;
    var boolean alive;
    do Screen.clearScreen();    
    let x = 0;
    let y = 0;
    while (y < HEIGHT) {
      while (x < WIDTH) {
        let posX = LEFT_PADDING + (x * SCALE);
        let posY = TOP_PADDING + (y * SCALE);
        let alive = array[x + (y * WIDTH)]; 
        do Screen.setColor(alive);
        do Screen.drawRectangle(posX, posY, posX + SCALE, posY + SCALE);
        let x = x + 1;
      }
      let x = 0;
      let y = y + 1;
    }
    return;
   }
   

   function void drawQueue(){
      var int DELAY, key, t;
      var LFSR state, tempState, mask;
      var Queue displayQ;

      let DELAY = 30;
      let displayQ = Queue.new(5);
      let state = LFSR.decToBin(5687, 16);
      let mask = LFSR.decToBin(45, 16);
      
      let t = 0;
      while (true) {
         let key = Keyboard.keyPressed();  
         if ((key = 32) & (t = 0)) {
            let t = DELAY;
            let tempState = state;
            let state = LFSR.nextGalois(state, mask);
            do tempState.dispose();
            do displayQ.add(state);
            do Screen.clearScreen();
            do displayQ.display(8, 23);    
         }

         if (t > 0 ) {
            let t = t - 1; 
         }
      }
      do mask.dispose();
      do state.dispose();
      do displayQ.dispose();
      return;

   }

   function void doNTrials(int n) {
      var int nOfTrials, i;
      var LFSR state, tempState, mask;
      
      let nOfTrials = n;
      let i = 0;
      let state = LFSR.decToBin(5687, 16);
      let mask = LFSR.decToBin(45, 16);
      
      
      while (i < nOfTrials) {
         let tempState = state;
         let state = LFSR.nextGalois(state, mask);
         do tempState.dispose();
         let i = i + 1;
      }
      do state.dispose();
      do mask.dispose();
      do Output.moveCursor(5, 20);
      do Output.printInt(nOfTrials);
      return;
   }
   function void doNTrialsWithQ(int n) {
      var int nOfTrials, i;
      var LFSR state, tempState;
      var Queue displayQ;
      var LFSR mask;
      
      let mask = LFSR.decToBin(45, 16);
      let nOfTrials = n;
      let i = 0;
      let state = LFSR.decToBin(5687, 16);
      let displayQ = Queue.new(5);
           
      while (i < nOfTrials) {
         let tempState = state;
         do displayQ.add(state);
         let state = LFSR.nextGalois(state, mask);
         do tempState.dispose();
         let i = i + 1;
      }
      do state.dispose();
      do displayQ.dispose();
      do mask.dispose();
      do Output.moveCursor(5, 20);
      do Output.printInt(nOfTrials);
      return;
   }

   function Array genCaveArrayRedundant(int seed, int n) {
      var int i, zeros, ones, bit;
      var LFSR startingState, state, tempState, mask, zero;
      var Array res;
      
      let i = 0;
      let zeros = 0;
      let ones = 0;
      let res = Array.new(n);
      let startingState = LFSR.decToBin(seed, 16);
      let state = startingState;
      let mask = LFSR.decToBin(45, 16);
      let zero = LFSR.decToBin(0, 16);
      
      while (i < n) {
         let tempState = state;
         let state = LFSR.nextGalois(state, mask);
         if ((LFSR.binEquals(state, startingState)) |
             (LFSR.binEquals(state, zero))) {
            let state = LFSR.decToBin(i, 16);         
         }
         let bit = state.getMSB();
         if (bit = 0) {
            let zeros = zeros + 1;
         }
         else {
            let ones = ones + 1;
         }
         let res[i] = bit;
         do tempState.dispose();
         let i = i + 1;
      }
      do state.dispose();
      do mask.dispose();
      do Output.moveCursor(5, 20);
      do Output.printString("Zeros: ");
      do Output.printInt(zeros);
      do Output.moveCursor(6, 20);
      do Output.printString("Ones: ");
      do Output.printInt(ones);
      
      //do Output.printInt(n);
      return res;  
   }

   function Array genCaveArray(int seed, int n) {
      var int i, zeros, ones, bit;
      var Array res;
      var RandGen randG;
      
      let i = 0;
      let zeros = 0;
      let ones = 0;
      let res = Array.new(n);
      let randG = RandGen.new(seed);
      
      while (i < n) {
         let bit = randG.genBit();
         if (bit = 0) {
            let zeros = zeros + 1;
         }
         else {
            let ones = ones + 1;
         }
         let res[i] = bit;
         let i = i + 1;
      }
      do Output.moveCursor(5, 20);
      do Output.printString("Zeros: ");
      do Output.printInt(zeros);
      do Output.moveCursor(6, 20);
      do Output.printString("Ones: ");
      do Output.printInt(ones);
      
      //do Output.printInt(n);
      return res;  
   }

}
