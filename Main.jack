class Main {
   function void main(){
      do Main.genCaveArray(13, 2500);
      return;
   }
   

   function void drawQueue(){
      var int DELAY, key, t;
      var LFSR state, tempState, mask;
      var Queue displayQ;

      let DELAY = 30;
      let displayQ = Queue.new(5);
      let state = LFSR.decToBin(5687, 16);
      let mask = LFSR.decToBin(45, 16);
      
      let t = 0;
      while (true) {
         let key = Keyboard.keyPressed();  
         if ((key = 32) & (t = 0)) {
            let t = DELAY;
            let tempState = state;
            let state = LFSR.nextGalois(state, mask);
            do tempState.dispose();
            do displayQ.add(state);
            do Screen.clearScreen();
            do displayQ.display(8, 23);    
         }

         if (t > 0 ) {
            let t = t - 1; 
         }
      }
      do mask.dispose();
      do state.dispose();
      do displayQ.dispose();
      return;

   }

   function void doNTrials(int n) {
      var int nOfTrials, i;
      var LFSR state, tempState, mask;
      
      let nOfTrials = n;
      let i = 0;
      let state = LFSR.decToBin(5687, 16);
      let mask = LFSR.decToBin(45, 16);
      
      
      while (i < nOfTrials) {
         let tempState = state;
         let state = LFSR.nextGalois(state, mask);
         do tempState.dispose();
         let i = i + 1;
      }
      do state.dispose();
      do mask.dispose();
      do Output.moveCursor(5, 20);
      do Output.printInt(nOfTrials);
      return;
   }
   function void doNTrialsWithQ(int n) {
      var int nOfTrials, i;
      var LFSR state, tempState;
      var Queue displayQ;
      var LFSR mask;
      
      let mask = LFSR.decToBin(45, 16);
      let nOfTrials = n;
      let i = 0;
      let state = LFSR.decToBin(5687, 16);
      let displayQ = Queue.new(5);
           
      while (i < nOfTrials) {
         let tempState = state;
         do displayQ.add(state);
         let state = LFSR.nextGalois(state, mask);
         do tempState.dispose();
         let i = i + 1;
      }
      do state.dispose();
      do displayQ.dispose();
      do mask.dispose();
      do Output.moveCursor(5, 20);
      do Output.printInt(nOfTrials);
      return;
   }

   function Array genCaveArray(int seed, int n) {
      var int i, zeros, ones, bit;
      var LFSR startingState, state, tempState, mask, zero;
      var Array res;
      
      let i = 0;
      let zeros = 0;
      let ones = 0;
      let res = Array.new(n);
      let startingState = LFSR.decToBin(seed, 16);
      let state = startingState;
      let mask = LFSR.decToBin(45, 16);
      let zero = LFSR.decToBin(0, 16);
      
      while (i < n) {
         let tempState = state;
         let state = LFSR.nextGalois(state, mask);
         if ((LFSR.binEquals(state, startingState)) |
             (LFSR.binEquals(state, zero))) {
            let state = LFSR.decToBin(i, 16);         
         }
         let bit = state.getMSB();
         if (bit = 0) {
            let zeros = zeros + 1;
         }
         else {
            let ones = ones + 1;
         }
         let res[i] = bit;
         do tempState.dispose();
         let i = i + 1;
      }
      do state.dispose();
      do mask.dispose();
      do Output.moveCursor(5, 20);
      do Output.printString("Zeros: ");
      do Output.printInt(zeros);
      do Output.moveCursor(6, 20);
      do Output.printString("Ones: ");
      do Output.printInt(ones);
      
      //do Output.printInt(n);
      return res;  
   }

}